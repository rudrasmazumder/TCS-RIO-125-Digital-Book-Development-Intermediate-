<?xml version="1.0" encoding="UTF-8"?>
<main>
  <PageData>
	<MainHeading><![CDATA[]]></MainHeading>
   <SubHeading><![CDATA[]]></SubHeading>
   <PageText>
      <pText><![CDATA[Existing network architectures were not designed to meet the requirements of today’s users, enterprises and carriers. Network designers are constrained by the limitations of current networks, which include the following.]]></pText>
    </PageText>
    <PageText>
      <pText><![CDATA[<ol type="a">
  <li><b>Complexity:</b> Networking technology to date has consisted largely of discrete sets of protocols designed to connect hosts reliably over arbitrary distances, link speeds and topologies. To meet business and technical needs over the last few decades, the industry has evolved networking protocols to deliver higher performance and reliability, broader connectivity and more stringent security. Protocols tend to be defined in isolation, however, with each solving a specific problem and without the benefit of any fundamental abstractions. This has resulted in one of the primary limitations of today’s network complexity. For example, to add or move any device, IT must touch multiple switches, routers, firewalls, Web authentication portals, etc. and update Access Control Lists (ACLs), Virtual LANs (VLANs), Quality of Services (QoS) and other protocol-based mechanisms using device-level management tools. In addition, network topology, vendor switch model and software version all must be taken into account. Due to this complexity, today’s networks are relatively static as IT seeks to minimize the risk of service disruption. The static nature of networks is in stark contrast to the dynamic nature of today’s server environment, where server virtualization has greatly increased the number of hosts requiring network connectivity and fundamentally altered assumptions about the physical location of hosts.

   Prior to virtualization, applications resided on a single server and primarily exchanged traffic with select clients. Today, applications are distributed across multiple virtual machines (VMs), which exchange traffic flows with each other. VMs migrate to optimize and rebalance server workloads, causing the physical end points of existing flows to change (sometimes rapidly) over time. VM migration challenges many aspects of traditional networking, from addressing schemes and namespaces to the basic notion of a segmented, routing-based design. In addition to adopting virtualization technologies, many enterprises today operate an IP converged network for voice, data and video traffic. While existing networks can provide differentiated QoS levels for different applications, the provisioning of those resources is highly manual. IT must configure each vendor’s equipment separately and adjust parameters such as network bandwidth and QoS on a per-session, per-application basis. Because of its static nature, the network cannot dynamically adapt to changing traffic, application and user demands.</li>
  <li><b>Inconsistent policies:</b> To implement a network-wide policy, IT may have to configure thousands of devices and mechanisms. For example, every time a new virtual machine is brought up, it can take hours, in some cases days, for IT to reconfigure ACLs across the entire network. The complexity of today’s networks makes it very difficult for IT to apply a consistent set of access, security, QoS and other policies to increasingly mobile users, which leaves the enterprise vulnerable to security breaches,non-compliance with regulations and other negative consequences.</li>
</ol>]]></pText>
    </PageText>
      
      <PageText>
      <pText><![CDATA[For switch deployment, Mininet software based on Python language can be used. This software can be used to create a virtual network with OpenFlow enabled switches. It supports both remote and local controllers. Various softwares are available for Controller configuration like Pox, Nox, FloodLight, OpenDayLight and ONOS. Among these OpenDayLight and ONOS are two popularly used softwares for Controller configuration.]]></pText>
    </PageText>
     <PageText>
      <pText><![CDATA[Performance of SDN depends on Rule Placement and Controller Placement in the network. Control message overhead may be increased due to additional number of packets (PACKET-IN) messages. Unified network management is possible using SDN, while leveraging the global view of the network.]]></pText>
    </PageText>
       <SubHeading><![CDATA[<b>9.8. Security in SDN</b>]]></SubHeading
    <PageText>
      <pText><![CDATA[There is enhanced security while using SDN. The security is implemented using firewall, proxy, HTTP and Intrusion Detection System (IDS). Figure 9.11 shows a topology to implement security in SDN.]]></pText>
    </PageText>
    <PageText>
      <pText><![CDATA[<div class="BigImgClass" style="text-align:center"><img src="en/images/9_11.png"></div>]]></pText>
    </PageText>
      <PageText>
      <pText><![CDATA[<div class="TableHeadingClass">Fig.9.11: A Topology to Implement SDN]]></pText>
    </PageText>
      
      <PageText>
      <pText><![CDATA[<ol>
  <li value="1">When an HTTP request comes, it is first forwarded to Firewall 1 (FW1).</li>
  <li>From the Firewall 1, it is sent to Intrusion Detection System 1 (IDS1).</li>
  </ol>]]></pText>
    </PageText>
      </PageData>
</main>
